// Copyright 2021 Peter Williams <pwil3058@gmail.com> <pwil3058@bigpond.net.au>
// alap_gen_ng.alaps
// alap_gen_ng Specification for alap_gen_ng grammar Specification language

%{
use std::{fs::File, io::Read, rc::Rc};

use crate::{
    attributes::*,
    grammar::Specification,
    production::ProductionTail,
    symbol::Associativity,
    symbol::tag::TagOrToken,
};

use lazy_static::lazy_static;
%}

%attr   AttributeData
%target Specification

%%

%token  REGEX           (\(.+\))
%token  LITERAL         ("(\\"|[^"\t\r\n\v\f])*")
%token  ATTR            "%attr"
%token  TARGET          "%target"
%token  TOKEN           "%token"
%token  LEFT            "%left"
%token  RIGHT           "%right"
%token  NONASSOC        "%nonassoc"
%token  PRECEDENCE      "%prec"
%token  SKIP            "%skip"
%token  ERROR           "%error"
%token  INJECT          "%inject"
%token  NEWSECTION      "%%"
%token  COLON           ":"
%token  VBAR            "|"
%token  DOT             "."
%token  IDENT           ([a-zA-Z]+[a-zA-Z0-9_]*)
%token  PREDICATE       (\?\((.|[\n\r])*?\?\))
%token  ACTION          (!\{(.|[\n\r])*?!\})
%token  RUSTCODE        (%\{(.|[\n\r])*?%\})

%skip (/\*(.|[\n\r])*?\*/)
%skip (//[^\n\r]*)
%skip (\s+)

%right INJECT

%%
Specification: Preamble Configuration "%%" Definitions "%%" ProductionRules.

OptionalInjection: !{ // no injection so nothing to do !} | Injection .

InjectionHead: "%inject" LITERAL
        !{
            let (text, location) = $2.text_and_location();
            let file_path = text.trim_matches('"');
            match File::open(&file_path) {
                Ok(mut file) => {
                    let mut text = String::new();
                    if let Err(err) = file.read_to_string(&mut text) {
                        self.error(&location, &format!("Injecting: {}", err));
                    } else if text.len() == 0 {
                        self.error(&location, &format!("Injected file \"{}\" is empty.", file_path));
                    } else {
                        $INJECT(text, file_path.to_string());
                    }
                }
                Err(err) => self.error(&location, &format!("Injecting: {}.", err)),
            };
        !}
    .

// NB This (including the split) is needed to allow for "look ahead" mechanism.
// It ensures injection occurs before any meaningful tokens are read
Injection: InjectionHead "." .

// Preamble
Preamble:
        !{
            // no Preamble defined so there's nothing to do
        !}
    | OptionalInjection RUSTCODE OptionalInjection
        !{
            let text = $2.matched_text();
            self.set_preamble(&text[2..text.len() - 2]);
        !}
    .

// Configuration
Configuration: AttributeType OptionalInjection TargetType OptionalInjection
    | TargetType OptionalInjection AttributeType OptionalInjection
    .

AttributeType: "%attr" IDENT
    !{
        self.attribute_type = $2.matched_text().to_string();
    !}
    .

TargetType: "%target" IDENT
    !{
        self.target_type = $2.matched_text().to_string();
    !}
    .

Definitions : TokenDefinitions SkipDefinitions PrecedenceDefinitions .

// Token Definitions
TokenDefinitions : OptionalInjection TokenDefinition
    | TokenDefinitions OptionalInjection TokenDefinition OptionalInjection
    .

TokenDefinition: "%token" NewTokenName LITERAL
        !{
            let (name, location) = $2.text_and_location();
            let text = $3.matched_text();
            if let Err(err) = self.symbol_table.new_literal_token(name, text, location) {
                self.error(location, &err.to_string());
            }
        !}
    | "%token" NewTokenName REGEX
        !{
            let (name, location) = $2.text_and_location();
            let text = $3.matched_text();
            if let Err(err) = self.symbol_table.new_regex_token(name, text, location) {
                self.error(location, &err.to_string());
            }
        !}
    .

NewTokenName: IDENT ?( !Self::is_allowable_name($1.matched_text()) ?)
        !{
            let (name, location) = $1.text_and_location();
            self.warning(
                location,
                &format!("token name \"{}\" may clash with generated code", name),
            );
        !}
    | IDENT
    .

// Skip Definitions
SkipDefinitions : // empty production
        !{
            // do nothing
        !}
    | SkipDefinitions OptionalInjection SkipDefinition OptionalInjection
    .

SkipDefinition: "%skip" REGEX
        !{
            let skip_rule = $2.matched_text();
            self.symbol_table.add_skip_rule(skip_rule);
        !}
    .

// Precedence Definitions
PrecedenceDefinitions : // empty production
        !{
            // do nothing
        !}
    | PrecedenceDefinitions OptionalInjection PrecedenceDefinition OptionalInjection
    .

PrecedenceDefinition: "%left" TagList
        !{
            let tag_list = $2.tag_or_token_list();
            self.symbol_table.set_precedences(Associativity::Left, tag_list);
        !}
    | "%right" TagList
        !{
            let tag_list = $2.tag_or_token_list();
            self.symbol_table.set_precedences(Associativity::Right, tag_list);
        !}
    | "%nonassoc" TagList
        !{
            let tag_list = $2.tag_or_token_list();
            self.symbol_table.set_precedences(Associativity::NonAssoc, tag_list);
        !}
    .

TagList: Tag
        !{
            let tag_or_token = $1.tag_or_token();
            $$ = AttributeData::TagOrTokenList(vec![tag_or_token.clone()]);
        !}
    | TagList Tag
        !{
            let tag_or_token = $2.tag_or_token();
            $$.tag_or_token_list_mut().push(tag_or_token.clone());
        !}
    .

Tag: LITERAL
        !{
            let (text, location) = $1.text_and_location();
            if let Some(token) = self.symbol_table.get_literal_token(text) {
                $$ = AttributeData::TagOrToken(token.into());
            } else {
                $$ = AttributeData::TagOrToken(TagOrToken::Invalid);
                let msg = format!("Literal token \"{}\" is not known", text);
                self.error(location, &msg);
            }
        !}
    | IDENT
        !{
            let (name, location) = $1.text_and_location();
            if let Some(token) = self.symbol_table.get_token(name) {
                $$ = AttributeData::TagOrToken(token.into());
            } else {
                if !Self::is_allowable_name(name) {
                    self.warning(
                        location,
                        &format!("tag name \"{}\" may clash with generated code", name),
                    );
                };
                match self.symbol_table.new_tag(name, location) {
                    Ok(tag) => $$ = AttributeData::TagOrToken(TagOrToken::from(&tag)),
                    Err(err) => self.error(location, &err.to_string()),
                }
            }
        !}
    .

// Production rules
ProductionRules: OptionalInjection ProductionGroup OptionalInjection
    | ProductionRules ProductionGroup OptionalInjection
    .

ProductionGroup: ProductionGroupHead ProductionTailList "."
        !{
            let lhs = $1.non_terminal();
            let tails = $2.production_tail_list();
            for tail in tails.iter() {
                self.new_production(lhs, tail);
            }
        !}
    .

ProductionGroupHead: IDENT ":"
        !{
            let (name, location) = $1.text_and_location();
            match self.symbol_table.non_terminal_defined_at(name, location) {
                Ok(non_terminal) => {
                    $$ = AttributeData::NonTerminal(non_terminal);
                }
                Err(err) => self.report_error(location, err.to_string())
            }
        !}
    .

ProductionTailList: ProductionTail
        !{
            let production_tail = $1.production_tail().clone();
            $$ = AttributeData::ProductionTailList(vec![production_tail]);
        !}
    | ProductionTailList "|" ProductionTail
        !{
            let production_tail = $3.production_tail();
            $$.production_tail_list_mut().push(production_tail.clone());
        !}
    .

ProductionTail:
        !{
            let tail = ProductionTail::new(vec![], None, None, None);
            $$ = AttributeData::ProductionTail(tail)
        !}
    | Action
        !{
            let action = $1.action().to_string();
            let tail = ProductionTail::new(vec![], None, None, Some(action));
            $$ = AttributeData::ProductionTail(tail)
        !}
    | Predicate Action
        !{
            let predicate = $1.predicate().to_string();
            let action = $2.action().to_string();
            let tail = ProductionTail::new(vec![], Some(predicate), None, Some(action));
            $$ = AttributeData::ProductionTail(tail)
        !}
    | Predicate
        !{
            let predicate = $1.predicate().to_string();
            let tail = ProductionTail::new(vec![], Some(predicate), None, None);
            $$ = AttributeData::ProductionTail(tail)
        !}
    | SymbolList Predicate TaggedPrecedence Action
        !{
            let rhs = $1.symbol_list().clone();
            let predicate = $2.predicate().to_string();
            let tagged_precedence = $3.associative_precedence().clone();
            let action = $4.action().to_string();
            let tail = ProductionTail::new(rhs, Some(predicate), Some(tagged_precedence), Some(action));
            $$ = AttributeData::ProductionTail(tail)
        !}
    | SymbolList Predicate TaggedPrecedence
        !{
            let rhs = $1.symbol_list().clone();
            let predicate = $2.predicate().to_string();
            let tagged_precedence = $3.associative_precedence().clone();
            let tail = ProductionTail::new(rhs, Some(predicate), Some(tagged_precedence), None);
            $$ = AttributeData::ProductionTail(tail)
        !}
    | SymbolList Predicate Action
        !{
            let rhs = $1.symbol_list().clone();
            let predicate = $2.predicate().to_string();
            let action = $3.action().to_string();
            let tail = ProductionTail::new(rhs, Some(predicate), None, Some(action));
            $$ = AttributeData::ProductionTail(tail)
        !}
    | SymbolList Predicate
        !{
            let rhs = $1.symbol_list().clone();
            let predicate = $2.predicate().to_string();
            let tail = ProductionTail::new(rhs, Some(predicate), None, None);
            $$ = AttributeData::ProductionTail(tail)
        !}
    | SymbolList TaggedPrecedence Action
        !{
            let rhs = $1.symbol_list().clone();
            let tagged_precedence = $2.associative_precedence().clone();
            let action = $3.action().to_string();
            let tail = ProductionTail::new(rhs, None, Some(tagged_precedence), Some(action));
            $$ = AttributeData::ProductionTail(tail)
        !}
    | SymbolList TaggedPrecedence
        !{
            let rhs = $1.symbol_list().clone();
            let tagged_precedence = $2.associative_precedence().clone();
            let tail = ProductionTail::new(rhs, None, Some(tagged_precedence), None);
            $$ = AttributeData::ProductionTail(tail)
        !}
    | SymbolList Action
        !{
            let rhs = $1.symbol_list().clone();
            let action = $2.action().to_string();
            let tail = ProductionTail::new(rhs, None, None, Some(action));
            $$ = AttributeData::ProductionTail(tail)
        !}
    | SymbolList
        !{
            let rhs = $1.symbol_list().clone();
            let tail = ProductionTail::new(rhs, None, None, None);
            $$ = AttributeData::ProductionTail(tail)
        !}
    .

Action: ACTION
        !{
            let text = $1.matched_text();
            $$ = AttributeData::Action(text[2..text.len() - 2].to_string());
        !}
    .

Predicate: PREDICATE
        !{
            let text = $1.matched_text();
            $$ = AttributeData::Predicate(text[2..text.len() - 2].to_string());
        !}
    .

TaggedPrecedence: "%prec" IDENT
        !{
            let (name, location) = $2.text_and_location();
            let mut associativity = Associativity::default();
            let mut precedence = 0_u16;
            if let Some(tag) = self.symbol_table.tag_used_at(name, location) {
                associativity = tag.associativity();
                precedence = tag.precedence();
            } else if let Some(token) = self.get_token(name) {
                associativity = token.associativity();
                precedence = token.precedence();
            } else {
                self.error(location, &format!("{}: unknown tag", name));
            };
            $$ = AttributeData::AssociativityAndPrecedence((associativity, precedence));
        !}
    | "%prec" LITERAL
        !{
            let (lexeme, location) = $2.text_and_location();
            let mut associativity = Associativity::default();
            let mut precedence = 0_u16;
            if let Some(token) = self.get_literal_token(lexeme) {
                associativity = token.associativity();
                precedence = token.precedence();
            } else {
                self.error(location, &format!("{}: unknown tag", lexeme));
            };
            $$ = AttributeData::AssociativityAndPrecedence((associativity, precedence));
        !}
    .

SymbolList: Symbol
        !{
            let symbol = $1.symbol();
            $$ = AttributeData::SymbolList(vec![Rc::clone(&symbol)]);
        !}
    | SymbolList Symbol
        !{
            let symbol = $2.symbol();
            $$.symbol_list_mut().push(Rc::clone(&symbol));
        !}
    .

Symbol: IDENT
        !{
            let (name, location) = $1.text_and_location();
            if let Some(symbol) = self.symbol_table.use_symbol_named(name, location) {
                $$ = AttributeData::Symbol(symbol);
            } else {
                let symbol = self.symbol_table.use_new_non_terminal(name, location);
                $$ = AttributeData::Symbol(symbol);
            }
        !}
    | LITERAL
        !{
            let (lexeme, location) = $1.text_and_location();
            if let Some(symbol) = self.symbol_table.get_literal_token(lexeme, location) {
                $$ = AttributeData::Symbol(Rc::clone(symbol));
            } else {
                self.error(location, &format!("{}: unknown literal)", lexeme));
                let symbol = self
                    .symbol_table
                    .use_symbol_named(&AANonTerminal::AAError.to_string(), location)
                    .unwrap();
                aa_lhs = AttributeData::Symbol(symbol);
            }
        !}
    | "%error"
        !{
            let location = aa_rhs[0].location();
            let symbol = self
                .symbol_table
                .use_symbol_named(&AANonTerminal::AAError.to_string(), location)
                .unwrap();
            aa_lhs = AttributeData::Symbol(symbol);
        !}
    .
